{
  "name": "underscore.deferred",
  "description": "jQuery style Deferreds",
  "version": "0.4.0",
  "homepage": "https://github.com/wookiehangover/underscore.deferred",
  "author": {
    "name": "Sam Breed",
    "email": "sam@quickleft.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/wookiehangover/underscore.deferred.git"
  },
  "bugs": {
    "url": "https://github.com/wookiehangover/underscore.deferred/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/wookiehangover/underscore.deferred/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": "*"
  },
  "scripts": {
    "test": "grunt qunit && qunit -l '{ summary:true, errors:true }' -c ./underscore.deferred.js -t ./test/*.js"
  },
  "dependencies": {},
  "devDependencies": {
    "grunt": "~0.3.9",
    "rimraf": "~2.0.1",
    "underscore": "*",
    "qunit": "*"
  },
  "keywords": [
    "underscore deferreds",
    "underscore deferred",
    "deferreds",
    "deferred",
    "Deferred",
    "defered",
    "flow",
    "control",
    "async",
    "asynchronous",
    "flow-control",
    "underscore",
    "_",
    "jquery",
    "jQuery",
    "ender"
  ],
  "main": "./underscore.deferred.js",
  "ender": "./lib/ender.js",
  "jam": {
    "main": "dist/underscore.deferred.js",
    "include": [
      "dist/underscore.deferred.js"
    ],
    "dependencies": {
      "lodash": "*"
    },
    "shim": {
      "deps": [
        "lodash"
      ]
    }
  },
  "readme": "# Underscore.Deferred\n\n[![Build Status](https://secure.travis-ci.org/wookiehangover/underscore.deferred.png?branch=master)](http://travis-ci.org/wookiehangover/underscore.deferred)\n\nv0.4.0 (jQuery 1.8.3)\n\nThis is a port of jQuery.Deferred as an Underscore mixin, but it can be\nused without any depencencies. It currently matches the Deferred specifications\nand implementation from jQuery 1.8.0, with all the associated helpers.\n\n## Deferreds are great, let's take them everywhere\n\njQuery offers a robust, consistent and well documented API; this project aims\nto make it portable. jQuery added a handful of helper methods to their\nimplementation of the [Common.js Promises/A Spec][promise] and they're faithfully\nreproduced without any dependencies.\n\n## Usage\n\nunderscore.deferred works on the server and in the browser.\n\nIn the browser, just require it like you would any other file. If you're\nincluding Underscore on the page, make sure you include it before\nunderscore.deferred. If you don't have Underscore, the plugin attaches to\n`window._`.\n\nOn the server, simply install via npm and include it with require:\n\n    var _ = require('underscore.deferred');\n    var dfd = new _.Deferred(); // tada!\n\nOr if you'd like to use it as an Underscore or Lodash mixin:\n\n    var _ = require('underscore');\n    _.mixin( require('underscore.deferred') );\n\nUnderscore isn't a strict requirement, and assigning it to another\nname will always work.\n\nAddionally, underscore.Deferred can be used with [Ender.js][ender], if\nyou're still into that sort of thing.\n\n## Enhancements / Changes\n\nSo far, there are only 2 substantial differences between the jQuery API and\nunderscore.deffered's. This may change in the future as new or\ndivergent functionality is tested out, but rest assured that all differences\nwill be called out here (and will have proper test coverage.)\n\n###_.when\n\nunderscore.deferred will `apply` an Array if it's the only argument, providing a\nuseful shortcut for using `when` with an array of promises. Example:\n\n    var form = _.Deferred();\n    var auth = _.Deferred();\n\n    var promises = [ form.promise(), auth.promise() ];\n\n    _.when(promises).done(function(){\n      // ...\n    });\n\n    form.resolve();\n    auth.resolve();\n\n###_.then\n\nInspired by @domenic's\n[Promises/A compliance suite](https://github.com/domenic/promise-tests)\n(and the [accompanying gist](https://gist.github.com/3889970)), the\n0.4.0 release of underscore.deferred diverges from jQuery's\nimplementation slightly.\n\nFirst, throwing an error from within a handler in `then` will reject the\ndeferred object issued by `then` with the error message. Example:\n\n    var dfd = _.Deferred();\n\n    dfd.then(function(){\n      throw new Error(\"Oops!\");\n    }).fail(function( err ){\n      console.log(err.message); // \"Oops!\"\n    });\n\n    dfd.resolve();\n\nThis behavior alone isn't divergent from jQuery (all tests pass). It's\nhandy for bubbling errors from callbacks without entering [callback\nhell](http://callbackhell.com/).\n\nSecond, when chaining `then`'s or using the *new* deferred object issued by a\ncall to `then` **the state of the first deferred is not passed to\nsubsequent calls to `then`**. Example:\n\n    var dfd = _.Deferred();\n    dfd.then(null, function( a, b ){\n      return a * b;\n    }).then(function( value ){\n      equal(value, 6); // the second deferred is resolved\n    }, function(){\n      // reject handler never called\n    });\n\n    dfd.reject(2, 3); // the first deferred in the chain is rejected\n\nWhen paired with the first behavior, it makes chaining deferred's even\nmore useful.\n\nUnfortunately, this second point is divergent from jQuery's\nimplementation, with one failing test. jQuery maintains the state of the\nfirst deferred object _unless the handler returns a new deferred_.\n\nHere's an example of the \"old\" behavior (what's currently in jQuery 1.8.3):\n\n    var dfd = _.Deferred();\n    dfd.then(null, function( a, b ){\n      return a * b;\n    }).then(function(){\n      // resolve handler never called\n    }, function( value ){\n      equal(value, 6); // the second deferred is also rejected\n    });\n\n    dfd.reject(2, 3); // the first deferred in the chain is rejected\n\nIn the spirit of fidelity to Promises/A, underscored.deferred favors the\nnew behavior.\n\n## API\n\nunderscore.deferred is an implementation of the [jQuery.Deferred\nAPI][jquery-docs]. Here are some of the methods implemented:\n\n* [always](http://api.jquery.com/deferred.always/)\n* [done](http://api.jquery.com/deferred.done/)\n* [fail](http://api.jquery.com/deferred.fail/)\n* [notify](http://api.jquery.com/deferred.notify/)\n* [notifyWith](http://api.jquery.com/deferred.notifywith/)\n* [pipe](http://api.jquery.com/deferred.pipe/)\n* [promise](http://api.jquery.com/deferred.promise/)\n* [reject](http://api.jquery.com/deferred.reject/)\n* [rejectWith](http://api.jquery.com/deferred.rejectWith/)\n* [resolve](http://api.jquery.com/deferred.resolve/)\n* [resolveWith](http://api.jquery.com/deferred.resolve/)\n* [state](http://api.jquery.com/deferred.notifywith/)\n* [then](http://api.jquery.com/deferred.then/)\n* [when](http://api.jquery.com/jQuery.when/)\n\nFor the complete API documentation, see [jQuery's Documentation][jquery-docs].\n\nThis project wouldn't exist if not for the the hard work and effort put\ninto jQuery by its core team and contributors--thanks for making this\npossible!\n\n## Minified Build\n\nOne time setup command:\n\n```\n$ npm install\n```\n\nTo build with [grunt](https://github.com/cowboy/grunt)\n\n```\n$ grunt\n```\n\nTo run headless Qunit tests (must have phantomjs in your path)\n\n```\n$ grunt qunit\n```\n\n## Contributors\n\n* [rwldrn](https://github.com/rwldrn)\n* [tbranyen](https://github.com/tbranyen)\n* [taxillian](https://github.com/taxilian)\n* [danheberden](https://github.com/danheberden)\n\n## Roadmap\n\nThe goal is to slim the code footprint for robust deferreds as much as\npossible while maintaining mixin integration with Underscore and faithfullness\nto the jQuery API.\n\nThis is a work in progress, feel free to contribute.\n\n## Release Notes\n\n0.4.0 - adding divergent behavior for [_.then](https://github.com/wookiehangover/underscore.deferred#_then)\n\n0.3.1 - updating to match jQuery 1.8.3\n\n0.3.0 - adding divergent behavior for [_.when](https://github.com/wookiehangover/underscore.deferred#_when)\n\n0.2.0 - updating to match jQuery 1.8.0\n\n0.1.4 - updating to match jQuery 1.7.2; **Please note that as of 0.1.4 underscore.deferred will be ALL LOWERCASE on\nnpm.** The camelcasing was a mistake from the outset, please update your\n`package.json` appropriately.\n\nMIT License.\n\n[promise]: http://wiki.commonjs.org/wiki/Promises\n[jquery-docs]: http://api.jquery.com/category/deferred-object/\n[ender]: http://ender.no.de/\n",
  "_id": "underscore.deferred@0.4.0",
  "dist": {
    "shasum": "2753de633b9ff7db601a2f3fa2af92b3dd290e6c",
    "tarball": "http://registry.npmjs.org/underscore.deferred/-/underscore.deferred-0.4.0.tgz"
  },
  "_npmVersion": "1.1.61",
  "_npmUser": {
    "name": "wookiehangover",
    "email": "sam@quickleft.com"
  },
  "maintainers": [
    {
      "name": "wookiehangover",
      "email": "sam@quickleft.com"
    }
  ],
  "directories": {},
  "_shasum": "2753de633b9ff7db601a2f3fa2af92b3dd290e6c",
  "_resolved": "https://registry.npmjs.org/underscore.deferred/-/underscore.deferred-0.4.0.tgz",
  "_from": "underscore.deferred@>=0.4.0 <0.5.0"
}
